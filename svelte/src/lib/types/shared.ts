/*
 Generated by typeshare 1.13.3
*/

export enum Locale {
	En = "en",
	ZhTw = "zh-tw",
}

export interface Interaction {
	id: string;
	createdAt: Date;
	locale: Locale;
	duration: number;
	userAgent?: string;
}

export interface InteractionInput {
	locale: Locale;
	duration: number;
}

export type WsMsg = 
	| { type: "interaction", data: Interaction };

/**
 * Custom JSON reviver and replacer functions for dynamic data transformation
 * ReviverFunc is used during JSON parsing to detect and transform specific data structures
 * ReplacerFunc is used during JSON serialization to modify certain values before stringifying.
 * These functions allow for flexible encoding and decoding of data, ensuring that complex types are properly handled when converting between TS objects and JSON
 */
export const ReviverFunc = (key: string, value: unknown): unknown => {
    if (typeof value === "string" && /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/.test(value) && (key === "createdAt")) {
        return new Date(value);
    }
    return value;
};

export const ReplacerFunc = (key: string, value: unknown): unknown => {
    if (value instanceof Date) {
        return value.toISOString();
    }
    return value;
};
